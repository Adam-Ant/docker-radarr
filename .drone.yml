pipeline:
  identify:
    image: docker
    environment:
      - RADARR_BRANCH=develop
    commands:
      # Grab the current version, prevents race conditions
      - apk add --no-cache curl jq
      - curl -fL "http://radarr.aeonlucid.com/v1/update/$RADARR_BRANCH?os=linux&version=0.0"
            | tee /dev/stderr
            | jq -r '.updatePackage.version' > .radarr_tag

  build:
    image: docker
    volumes:
       - /var/run/docker.sock:/var/run/docker.sock
    commands:
      - docker build
            --no-cache --pull
            --build-arg RADARR_TAG=$(cat .radarr_tag)
            -t radarr-dev .

  test:
    image: docker
    volumes:
       - /var/run/docker.sock:/var/run/docker.sock
    commands:
      - apk add --no-cache curl
      - mkdir -p /tmp/config
      - chown 906:900 /tmp/config
      - CON_NAME=$(docker run -dt -v /tmp/config:/config radarr-dev)
      - timeout -t 12 -- docker logs -f $$CON_NAME | cat &
      - sleep 5
      - IP=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $$CON_NAME)
      - if [ -z "$IP" ]; then
            echo "The container exited.. sadpanda";
            docker inspect --format='{{.State.ExitCode}}' $$CON_NAME;
            exit 25;
        fi
      - curl -L --retry-max-time 30 --max-time 5 --retry 10 --retry-delay 5 --retry-connrefused $IP:7878 > /dev/null
      - docker kill $$CON_NAME
      - docker rm $$CON_NAME

  publish:
    image: docker
    secrets: [ DOCKER_USER, DOCKER_PASS ]
    when:
       event: [ push, tag, deployment ]
    volumes:
       - /var/run/docker.sock:/var/run/docker.sock
    commands:
       - echo $DOCKER_USER
       - docker tag radarr-dev adamant/radarr:latest
       - docker tag radarr-dev adamant/radarr:$(cat .radarr_tag)
       - docker login -u $DOCKER_USER -p $DOCKER_PASS
       - docker push adamant/radarr
       - docker rmi radarr-dev adamant/radarr:latest adamant/radarr:$(cat .radarr_tag)
       - echo "CONGRATS! SUCCESSFULLY BUILT RADARR-STABLE!"
